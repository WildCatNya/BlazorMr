@page "/preview"

@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<MediaContext> DbFactory
@inject IPreviewManager PreviewManager
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@if (Videos is null)
{
    <p><em>Загрузка...</em></p>
}
else if (Videos.Count == 0)
{
    <p><em>Данных нет</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th colspan="4">
                    <div class="text-center">
                        <button class="btn btn-warning me-2" @onclick="DownloadAll">Скачать все</button>
                        <button class="btn btn-warning me-2" @onclick="UpdateAll">Обновить все</button>
                        <button class="btn btn-warning" @onclick="DeleteAll">Удалить все</button>
                    </div>
                </th>
            </tr>
            <tr>
                <th>Id</th>
                <th>Video Title</th>
                <th>Has Preview</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var video in Videos.OrderBy(x => PreviewManager.HasPreview(x)))
            {
                bool previewExist = PreviewManager.HasPreview(video);

                <tr class="align-middle">
                    <td>@video.Id</td>
                    <td>@video.Title</td>
                    <td>
                        <ImageLayout Access="previewExist" />
                    </td>
                    <td>
                        @if (previewExist)
                        {
                            <button class="btn btn-danger" @onclick="() => Delete(video)">Удалить</button>
                        }
                        else
                        {
                            <div class="btn-group">
                                <button class="btn btn-success" @onclick="() => Download(video)">Скачать</button>
                                <button type="button" class="btn btn-success dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span class="visually-hidden"></span>
                                </button>
                                <ul class="dropdown-menu">
                                    @foreach (PreviewResolution resolution in Enum.GetValues(typeof(PreviewResolution)))
                                    {
                                        <li>
                                            <button class="dropdown-item" @onclick="() => Download(video, resolution)">@resolution.GetAttributeName()</button>
                                        </li>
                                    }
                                </ul>
                            </div>
                            <a href="/resolution/@video.Id" class="btn btn-warning ms-2">
                                <span class="oi oi-eye"></span>
                            </a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private MediaContext _context;

    private List<Video>? Videos;

    protected override async Task OnInitializedAsync()
    {
        _context = await DbFactory.CreateDbContextAsync();

        Videos = await _context.Videos.ToListAsync();
    }

    private async Task Delete(Video video)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Удалить превью?");
        if (confirmed)
        {
            PreviewManager.Delete(video);
            NavigationManager.NavigateTo("preview");
        }
    }
    private async Task Download(Video video)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Скачать превью?");
        if (confirmed)
        {
            PreviewManager.Download(video);
            await JsRuntime.InvokeVoidAsync("alert", "Скачивание закончено");
            NavigationManager.NavigateTo("preview");
        }
    }
    private async Task Download(Video video, PreviewResolution resolution)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Скачать превью?");
        if (confirmed)
        {
            PreviewManager.Download(video, resolution);
            await JsRuntime.InvokeVoidAsync("alert", "Скачивание закончено");
            NavigationManager.NavigateTo("preview");
        }
    }
    private async Task DownloadAll()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Скачать все нескачанные превьюшки? Это может занять некоторое время");
        if (confirmed)
        {
            foreach (var video in Videos.Where(x => !PreviewManager.HasPreview(x)))
            {
                PreviewManager.Download(video);
                await Task.Delay(1000);
            }
            await JsRuntime.InvokeVoidAsync("alert", "Скачивание закончено");
            NavigationManager.NavigateTo("preview");
        }
    }
    private async Task UpdateAll()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Обновить все превьюшки?");
        if (confirmed)
        {
            foreach (var video in Videos)
            {
                PreviewManager.Download(video);
            }
            NavigationManager.NavigateTo("preview");
        }
    }
    private async Task DeleteAll()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Удалить все превьюшки?");
        if (confirmed)
        {
            foreach (var video in Videos)
            {
                PreviewManager.Delete(video);
            }
            NavigationManager.NavigateTo("preview");
        }
    }
}