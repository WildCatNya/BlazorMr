@*@page "/paging"*@
@page "/"

@inject IUnitOfWork Unit
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@if (Videos is null)
{
    <p><em>Загрузка данных...</em></p>
}
else if (Videos.Count == 0)
{
    <p><em>Данных нет</em></p>
}
else
{
    <select class="mb-3" @onchange="OnChange">
        <option value="0">Все (@Authors.Sum(x => x.Videos.Count))</option>
        @foreach (var author in Authors.OrderBy(x => x.Name))
        {
            <option value="@author.Id">@author.Name (@author.Videos.Count)</option>
        }
    </select>

    <PaginatedListComp Source="Videos" PageSize="6" />
}

@code {
    private List<Video>? Videos;

    private List<Author>? Authors;

    protected override async Task OnInitializedAsync()
    {
        Videos = await Unit.VideoRepository.GetAllWithIncludesAsync(true);

        Authors = await Unit.AuthorRepository.GetAllAsync(true);
    }

    private void OnChange(ChangeEventArgs e)
    {
        int id = e.Value.ToString().ToInt32();

        if (id == 0)
        {
            Videos = Unit.VideoRepository.GetAll(true);
            return;
        }

        Videos = Unit.VideoRepository.FindWithIncludes(x => x.IdAuthor == id, true);
    }
}