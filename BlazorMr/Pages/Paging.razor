@*@page "/paging"*@
@page "/"

@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<MediaContext> DbFactory
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@if (Videos is null)
{
    <p><em>Загрузка данных...</em></p>
}
else if (Videos.Count == 0)
{
    <p><em>Данных нет</em></p>
}
else
{
    <select class="mb-3" @onchange="OnChange">
        <option value="0">Все (@Authors.Sum(x => x.Videos.Count))</option>
        @foreach (var author in Authors.OrderBy(x => x.Name))
        {
            <option value="@author.Id">@author.Name (@author.Videos.Count)</option>
        }
    </select>

    <input class="ms-3" type="number" @bind-value="PageSize" />

    <PaginatedListComp Source="Videos" PageSize="PageSize" />
}

@code {
    private MediaContext _context;

    private List<Video>? Videos;
    private List<Author>? Authors;
    private int PageSize;

    protected override async Task OnInitializedAsync()
    {
        _context = await DbFactory.CreateDbContextAsync();

        Videos = await _context.Videos.Include(x => x.TimeCodes).Include(x => x.IdAuthorNavigation).ToListAsync();

        Authors = await _context.Authors.ToListAsync();

        PageSize = Videos.Count / 3;
    }

    private void OnChange(ChangeEventArgs e)
    {
        int id = e.Value.ToString().ToInt32();

        if (id == 0)
        {
            Videos = _context.Videos.Include(x => x.TimeCodes).Include(x => x.IdAuthorNavigation).ToList();
            return;
        }
        Videos = _context.Videos.Include(x => x.TimeCodes).Include(x => x.IdAuthorNavigation).ToList().Where(x => x.IdAuthor == id).ToList();
    }
}