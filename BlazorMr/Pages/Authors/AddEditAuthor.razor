@page "/author/add"
@page "/author/edit/{AuthorId:int}"

@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<MediaContext> DbFactory
@inject NavigationManager NavigationManager

@if (Author is null)
{
    <p><em>Такого автора нет</em></p>
}
else
{
    <EditForm Model="@Author" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Name: </label>
            <div>
                <InputText @bind-Value="@Author.Name" />
                <ValidationMessage For="@(() => Author.Name)" />
            </div>
        </div>
        <div class="form-group mt-3">
            <label>Href: </label>
            <div>
                <InputText @bind-Value="@Author.Href" />
                <ValidationMessage For="@(() => Author.Href)" />
            </div>
        </div>
        <div class="form-group mt-3">
            <button class="btn btn-primary" type="submit">
                @(AuthorId == 0 ? "Create" : "Edit")
            </button>
            <a href="/author" class="btn btn-secondary">Назад</a>
        </div>
    </EditForm>
}

@code {
    [Parameter] public int AuthorId { get; set; }

    private MediaContext _context;

    private Author? Author;

    protected override async Task OnInitializedAsync()
    {
        _context = await DbFactory.CreateDbContextAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        Author = AuthorId == 0 ? new() : await _context.Authors.FindAsync(AuthorId);
    }

    private async Task Save()
    {
        if (AuthorId == 0)
        {
            _context.Authors.Add(Author);
        }
        else
        {
            _context.Entry(Author).State = EntityState.Modified;
        }

        await _context.SaveChangesAsync();

        NavigationManager.NavigateTo("author");
    }
}